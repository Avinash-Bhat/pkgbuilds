#!/bin/bash
#
# pbrisbin 2012
#
# downgrade one or more packages from cache or A.R.M.
#
###

errorout() { echo "error: $*" >&2; exit 1; }

message() {
  cat << EOF

  usage: downgrade [ -d <dir> ] [ -m <32|64> ] [ -a | -c ] [ -i ] [ -- ] <pkg> ...
    options:
      -d,--pkgdir       set download directory (A.R.M. only), default is \`~/Packages'
      -m,--arch         set search architecture (A.R.M. only), default is determined by \`uname -m\`
      -a,--noarm        don't search the A.R.M. when nothing's available in cache
      -c,--nocache      don't look in cache, go directly to A.R.M.
      -i,--noinstalled  don't show [installed] next to installed versions (speed up)

      -p,--pacman       (deprecated, set a PACMAN env var if not using just \`pacman')

EOF
  exit 1
}

# return the enabled repos in the order of pacman.conf
enabled_repos() { sed '/^\[\(.*\)\]$/!d;s//\1/g;/options/d' /etc/pacman.conf; } 

# returns true if the first argument is a valid index into the array of
# remaining arguments
is_valid_index() {
  local i="$1"; shift

  [[ -z "$i"           ]] && return 1 # no index
  [[ -n "${i//[0-9]/}" ]] && return 1 # not positive integer
  [[ $i -ge "$#"       ]] && return 1 # out of range

  return 0
}

# prompts for user input and adds a quit option. first argument is the
# variable to set with the user's response, second is the prompt
# message.
prompt_with_quit() {
  local var="$1" msg="$2"

  echo
  echo -n "$msg or [q]uit: " && read -r $var

  [[ "${!var}" == 'q' ]] && exit 1
}

# find local packages reverse sorted by version. we use the $term-[0-9]*
# glob to disambiguate cases like foo-1.0 and foo-completion-1.0.
local_packages() {
  local term="$1"

  # the R is a special case for erlang, others may exist
  find /var/cache/pacman/pkg -name "$term-[0-9R]*.pkg.tar.[gx]z" | LC_ALL='C' sort -rV
}

# find packages available in the A.R.M. removes packages duplicated
# between testing and non-testing repos.
arm_packages() {
  local term="$1" repos repo url tmp entry pack

  repos=
  for repo in $(enabled_repos); do
    repos="${repos}&${repo}=1"
  done

  url="http://arm.konnichi.com/search/raw.php?a=$arch&q=^$term\$$repos"

  tmp=( $(wget -q -O - "$url" 2>/dev/null | grep -v sig$ | sort -rV) )

  for entry in "${tmp[@]}"; do
    read -r repo pack < <(format_arm "$entry")

    # check for duplicates in testing, community-testing and
    # multilib-testing.
    if [[ "$repo" =~ testing$ ]] && \
      printf "%s\n" "${tmp[@]}" | grep -Fxv "$entry" | grep -Fq "$pack"; then

      continue
    fi

    echo "$entry"
  done
}

# print numbered entries in tabular form. uses the named function to
# extract repo and package out of each item.
print_table() {
  local func="$1"; shift
  local i=0 arg repo pack

  local fmt=" %4.4s)  %-17.17s  %s\n"

  for arg; do
    read -r repo pack < <($func "$arg")

    i=$((i+1))
    case $pack in
      ${installed// /-}*) printf "$fmt" "$i" "$repo" "$pack [installed]" ;;
      *)                  printf "$fmt" "$i" "$repo" "$pack" ;;
    esac
  done
}

# hardcode a local repo and take the basename for package.
format_local() { echo "local $(basename "$1")"; }

# read the 4th and 7th element out of the url, indexed by forward slash.
format_arm() { set ${1//\// }; echo "$3 $6"; }

# run a pacman command using either sudo or su root. uses PACMAN env var
# or a default of just 'pacman'.
run_pacman() {
  local pacman="${PACMAN:-pacman}" cmd

  if [[ $UID -eq 0 ]]; then
    errorout 'please do not run downgrade as root; su/sudo will be used when needed'
  fi

  if type -p sudo &>/dev/null; then
    sudo $pacman "$@"
    return $?
  fi

  printf -v cmd "%q " "$pacman" "$@"
  su root -c "$cmd"
}

# checks for local packages, presents them in a numbered table, if a
# choice is made, installs the package.
check_local_packages() {
  $searchcache || return 1

  local term="$1" pkg n
  local locals=( $(local_packages "$term") )

  [[ ${#locals[@]} -eq 0 ]] && return 1

  echo
  echo 'The following packages are available in your cache:'
  echo

  print_table format_local "${locals[@]}"

  if $searcharm; then
    prompt_with_quit num 'please choose a version, [s]earch A.R.M'
  else
    prompt_with_quit num 'please choose a version'
  fi

  [[ "$num" = 's' ]] && return 1

  n=$((num-1))

  is_valid_index "$n" "${locals[@]}" || errorout 'invalid choice.'

  pkg="${locals[$n]}"
  run_pacman -U "$pkg" || errorout "could not install package $pkg"
}

# checks for packages in A.R.M., presents them in a numbered table, if a
# choice is made, downloads and installs the package.
check_arm_packages() {
  $searcharm || return 1

  [[ "$arch" =~ ^(32|64)$ ]] || errorout "$arch is invalid, must be 32 or 64"

  local term="$1" url pkg n
  local arms=( $(arm_packages "$term") )

  [[ ${#arms[@]} -eq 0 ]] && return 1

  echo
  echo 'The following packages are available from the A.R.M.:'
  echo

  print_table format_arm "${arms[@]}"

  prompt_with_quit num 'please choose a version'

  n=$((num-1))

  is_valid_index "$n" "${arms[@]}" || errorout 'invalid choice.'

  url=${arms[$n]}
  pkg="$pkgdir/$(basename $url)"

  if [[ ! -d "$pkgdir" ]]; then
    mkdir -p "$pkgdir" || errorout "unable to create $pkgdir"
  fi

  wget -O "$pkg" "$url" || errorout "failed downloading $url"
  run_pacman -U "$pkg"  || errorout "could not install package $pkg"
}

[[ "$#" -eq 0 ]] && message

args=()

# Defaults
pkgdir="$HOME/Packages" # where to put packages
searcharm=true          # search arm if not in cache
searchcache=true        # check in cache before arm
showinstalled=true      # show [installed] next to installed versions

[[ "$(uname -m)" = 'x86_64' ]] && arch=64 || arch=32

# Options
while [[ -n "$1" ]]; do
  case "$1" in
    -p|--pacman)      shift; PACMAN="$1"            ;;
    -d|--pkgdir)      shift; pkgdir="${1/\~/$HOME}" ;;
    -m|--arch)        shift; arch="$1"              ;;
    -a|--noarm)       searcharm=false               ;;
    -c|--nocache)     searchcache=false             ;;
    -i|--noinstalled) showinstalled=false           ;;
    --)               shift; args+=( "$@" ); break  ;;
    -*)               message                       ;;
    *)                args+=( "$1" )                ;;
  esac
  shift
done

# Main
for term in "${args[@]}"; do
  # check for installed version if desired
  $showinstalled && installed=$(pacman -Q $term 2>/dev/null)
  installed=${installed:-DummyPkg}

  check_local_packages "$term" || check_arm_packages "$term"
done
